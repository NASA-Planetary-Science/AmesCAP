name: Test MarsPull

on:
  push:
    branches: [ devel ]
  pull_request:
    branches: [ devel ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Create virtual environment
      run: |
        python -m venv amescap
        source amescap/bin/activate
        python -m pip install --upgrade pip
    
    - name: Install AmesCAP from GitHub
      run: |
        source amescap/bin/activate
        # Check Python version
        python --version
        
        # Try installing with specific version constraint for numpy
        pip install --no-deps git+https://github.com/falconstryker/AmesCAP.git@devel
        pip install numpy>=1.24.0,<1.26.0  # Install an older numpy version compatible with Python 3.9
        pip install -e .  # Install the rest of dependencies
        
        # If that fails, try alternative installation approach
        if [ $? -ne 0 ]; then
          echo "Standard pip install failed, trying alternative approach..."
          git clone --branch devel https://github.com/falconstryker/AmesCAP.git
          cd AmesCAP
          
          # Modify setup.py or pyproject.toml to accept older numpy
          if [ -f "pyproject.toml" ]; then
            # Update numpy requirement in pyproject.toml
            sed -i 's/numpy>=1.26.2/numpy>=1.24.0/g' pyproject.toml
          fi
          
          if [ -f "setup.py" ]; then
            # Update numpy requirement in setup.py
            sed -i 's/numpy>=1.26.2/numpy>=1.24.0/g' setup.py
          fi
          
          pip install -e .
          cd ..
        fi
        
        # Check if installation was successful
        pip list | grep amescap
        
    - name: Copy profile file
      run: |
        source amescap/bin/activate
        # Check if profile file exists and copy it
        if [ -f amescap/mars_templates/amescap_profile ]; then
          cp amescap/mars_templates/amescap_profile ~/.amescap_profile
        else
          echo "Profile file not found in expected location, searching..."
          find . -name "amescap_profile" -o -name "amescap-profile" | xargs -I{} cp {} ~/.amescap_profile
        fi
    
    - name: Test MarsPull help message
      run: |
        source amescap/bin/activate
        MarsPull -h
    
    - name: Test MarsPull list functionality
      run: |
        source amescap/bin/activate
        MarsPull -list || echo "List command may require internet access or specific permissions"
    
    - name: Create test script
      run: |
        cat > test_marspull.py << 'EOF'
        import unittest
        import subprocess
        import os
        import sys
        
        class TestMarsPull(unittest.TestCase):
            def test_help_command(self):
                """Test if the help command works"""
                result = subprocess.run(["MarsPull", "-h"], 
                                       capture_output=True, text=True)
                self.assertEqual(result.returncode, 0)
                self.assertIn("Uility for downloading NASA Ames Mars Global Climate", result.stdout)
        
            def test_list_command(self):
                """Test if the list command works - we don't check output as it may vary"""
                result = subprocess.run(["MarsPull", "-list"], 
                                       capture_output=True, text=True)
                # Depending on network access, this might return different codes
                # so we just check that it runs without crashing
                if result.returncode == 0:
                    self.assertIn("Available", result.stdout)
        
            def test_error_on_missing_args(self):
                """Test that an error is raised when directory is specified without ls or filename"""
                result = subprocess.run(["MarsPull", "ACTIVECLDS"], 
                                       capture_output=True, text=True)
                self.assertIn("ERROR No file requested", result.stdout)
        
        if __name__ == '__main__':
            unittest.main()
        EOF
    
    - name: Run tests
      run: |
        source amescap/bin/activate
        # Make sure MarsPull is available
        which MarsPull || echo "MarsPull not found in PATH"
        python -m unittest test_marspull.py
    
    - name: Check for package integrity
      run: |
        source amescap/bin/activate
        # Print Python path to debug
        echo "Python path:"
        python -c "import sys; print(sys.path)"
        
        # Check installed packages
        pip list
        
        # Check if other expected scripts are installed
        if command -v MarsPlot &> /dev/null; then
          echo "MarsPlot is installed and working"
          MarsPlot -h
        else
          echo "MarsPlot not found, installation may be incomplete"
          echo "Checking for script locations:"
          find amescap -name "MarsPull.py" -o -name "MarsPlot.py"
          find AmesCAP -name "MarsPull.py" -o -name "MarsPlot.py" 2>/dev/null || echo "AmesCAP directory not found"
        fi