name: MarsFiles Test Workflow
# Cancel any in-progress job or previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
on:
  # Trigger the workflow on push to devel branch
  push:
    branches: [ devel ]
    paths:
      - 'bin/MarsFiles.py'
      - 'tests/test_marsfiles.py'
      - '.github/workflows/marsfiles_test.yml'
      - 'amescap/FV3_utils.py'
  # Allow manual triggering of the workflow
  workflow_dispatch:
  # Trigger on pull requests that modify relevant files
  pull_request:
    branches: [ devel ]
    paths:
      - 'bin/MarsFiles.py'
      - 'tests/test_marsfiles.py'
      - '.github/workflows/marsfiles_test.yml'
      - 'amescap/FV3_utils.py'
jobs:
  test:
    # Run on multiple OS and Python versions for comprehensive testing
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'
      # Don't cancel all jobs if one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      
      # Set up the specified Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      
      # Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Install dependencies
      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install numpy netCDF4 xarray scipy matplotlib
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install numpy netCDF4 xarray scipy matplotlib
          if (Test-Path -Path "requirements.txt") { pip install -r requirements.txt }
      
      # Install the package in development mode
      - name: Install package
        run: pip install -e .
      
      # Set up AmesCAP configuration
      - name: Set up AmesCAP configuration (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p $HOME/.amescap
          if [ -f mars_templates/amescap_profile ]; then
            cp mars_templates/amescap_profile $HOME/.amescap_profile
          else
            echo "# Default profile" > $HOME/.amescap_profile
          fi
      
      - name: Set up AmesCAP configuration (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -Path "$env:USERPROFILE\.amescap" -ItemType Directory -Force
          if (Test-Path -Path "mars_templates\amescap_profile") {
            Copy-Item -Path "mars_templates\amescap_profile" -Destination "$env:USERPROFILE\.amescap_profile" -Force
          } else {
            "# Default profile" | Out-File -FilePath "$env:USERPROFILE\.amescap_profile" -Encoding utf8
          }
      
      # Print out environment info
      - name: Show environment info
        run: |
          python -c "import os, sys, numpy, netCDF4, xarray, scipy, matplotlib; print(f'Python: {sys.version}, NumPy: {numpy.__version__}, NetCDF4: {netCDF4.__version__}, xarray: {xarray.__version__}, SciPy: {scipy.__version__}, Matplotlib: {matplotlib.__version__}')"
      
      # Free up disk space on Linux
      - name: Free up disk space
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
      
      # Create and configure test directory
      - name: Configure test directory (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p $HOME/marsfiles_tests
          echo "TMPDIR=$HOME/marsfiles_tests" >> $GITHUB_ENV
      
      - name: Configure test directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -Path "$env:USERPROFILE\marsfiles_tests" -ItemType Directory -Force
          echo "TMPDIR=$env:USERPROFILE\marsfiles_tests" >> $env:GITHUB_ENV
      
      # Run individual tests to debug what's working and what's not
      - name: Run basic test - Help Message (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd $HOME/marsfiles_tests
          python -m unittest -v $GITHUB_WORKSPACE/tests/test_marsfiles.py:TestMarsFiles.test_help_message
      
      - name: Run basic test - Help Message (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd $env:USERPROFILE\marsfiles_tests
          python -m unittest -v "$env:GITHUB_WORKSPACE\tests\test_marsfiles.py:TestMarsFiles.test_help_message"
      
      # Run the tests sequentially to avoid timeout issues
      - name: Run all tests (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd $HOME/marsfiles_tests
          python -m unittest discover -v $GITHUB_WORKSPACE/tests -p test_marsfiles.py
      
      - name: Run all tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd $env:USERPROFILE\marsfiles_tests
          python -m unittest discover -v "$env:GITHUB_WORKSPACE\tests" -p test_marsfiles.py
      
      # Clean up
      - name: Clean up (Unix)
        if: runner.os != 'Windows' && always()
        shell: bash
        run: |
          rm -rf $HOME/marsfiles_tests || true
      
      - name: Clean up (Windows)
        if: runner.os == 'Windows' && always()
        shell: pwsh
        run: |
          Remove-Item -Path "$env:USERPROFILE\marsfiles_tests" -Recurse -Force -ErrorAction SilentlyContinue