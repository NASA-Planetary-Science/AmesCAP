name: MarsFiles Test Workflow
# Cancel any in-progress job or previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
on:
  # Trigger the workflow on push to devel branch
  push:
    branches: [ devel ]
    paths:
      - 'bin/MarsFiles.py'
      - 'tests/test_marsfiles.py'
      - '.github/workflows/marsfiles_test.yml'
      - 'amescap/FV3_utils.py'
  # Allow manual triggering of the workflow
  workflow_dispatch:
  # Trigger on pull requests that modify relevant files
  pull_request:
    branches: [ devel ]
    paths:
      - 'bin/MarsFiles.py'
      - 'tests/test_marsfiles.py'
      - '.github/workflows/marsfiles_test.yml'
      - 'amescap/FV3_utils.py'
jobs:
  test:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
            test-scope: 'full'
          - os: macos-latest 
            python-version: '3.11'
            test-scope: 'basic'
          - os: windows-latest
            python-version: '3.11'
            test-scope: 'basic'
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install numpy netCDF4 xarray scipy matplotlib pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Install package
        run: pip install -e .
      
      - name: Set up AmesCAP configuration (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p $HOME/.amescap
          touch $HOME/.amescap_profile
      
      - name: Set up AmesCAP configuration (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -Path "$env:USERPROFILE\.amescap" -ItemType Directory -Force
          New-Item -Path "$env:USERPROFILE\.amescap_profile" -ItemType File -Force
      
      # Free up disk space on Linux for faster execution
      - name: Free up disk space
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
      
      # Run the help message test first as a quick check
      - name: Run help message test
        run: |
          cd tests
          python -m unittest test_marsfiles.TestMarsFiles.test_help_message
      
      # Run the basic tests on macOS and Windows
      - name: Run basic tests
        if: matrix.test-scope == 'basic'
        run: |
          cd tests
          python -m unittest test_marsfiles.TestMarsFiles.test_help_message test_marsfiles.TestMarsFiles.test_zonal_average
      
      # Run the full test suite on Ubuntu
      - name: Run full tests
        if: matrix.test-scope == 'full'
        timeout-minutes: 15
        run: |
          cd tests
          python -m unittest test_marsfiles