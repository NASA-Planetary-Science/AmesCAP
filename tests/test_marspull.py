#!/usr/bin/env python3
"""
Integration tests for MarsPull.py

These tests actually download files to verify the functionality of MarsPull.
"""

import os
import sys
import unittest
import shutil
import tempfile
import argparse
import subprocess

class TestMarsPull(unittest.TestCase):
    """Integration test suite for MarsPull"""

    @classmethod
    def setUpClass(cls):
        """Set up the test environment"""
        # Create a temporary directory in the user's home directory
        cls.test_dir = os.path.join(os.path.expanduser('~'), 'MarsPull_test_downloads')
        os.makedirs(cls.test_dir, exist_ok=True)

        # Project root directory
        cls.project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    def setUp(self):
        """Change to temporary directory before each test"""
        os.chdir(self.test_dir)

    @classmethod
    def tearDownClass(cls):
        """Clean up the test environment"""
        try:
            shutil.rmtree(cls.test_dir, ignore_errors=True)
        except Exception:
            print(f"Warning: Could not remove test directory {cls.test_dir}")

    def run_mars_pull(self, args):
        """
        Run MarsPull using subprocess to avoid import-time argument parsing

        :param args: List of arguments to pass to MarsPull
        """
        # Construct the full command to run MarsPull
        cmd = [sys.executable, '-m', 'bin.MarsPull'] + args

        # Run the command
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=self.test_dir,  # Run in the test directory
                env=dict(os.environ, PWD=self.test_dir)  # Ensure current working directory is set
            )

            # Check if the command was successful
            if result.returncode != 0:
                self.fail(f"MarsPull failed with error: {result.stderr}")

            return result
        except Exception as e:
            self.fail(f"Failed to run MarsPull: {e}")

    def check_files_in_test_directory(self, expected_files):
        """
        Check if files exist in the test directory

        If files are not found, list all files in the directory to help diagnose the issue
        """
        test_files = os.listdir(self.test_dir)

        for filename in expected_files:
            if filename not in test_files:
                print(f"Files in test directory ({self.test_dir}):")
                print(test_files)
                self.fail(f"File {filename} was not found in the test directory")

            # Verify file is not empty
            filepath = os.path.join(self.test_dir, filename)
            self.assertGreater(os.path.getsize(filepath), 0,
                               f"Downloaded file {filename} is empty")

    def test_download_fv3betaout1_specific_file(self):
        """Test downloading a specific file from FV3BETAOUT1"""
        result = self.run_mars_pull(['FV3BETAOUT1', '-f', '03340.fixed.nc'])

        # Check that the file was created
        self.check_files_in_test_directory(['03340.fixed.nc'])

    def test_download_inertclds_single_ls(self):
        """Test downloading files from INERTCLDS for a single Ls value"""
        result = self.run_mars_pull(['INERTCLDS', '-ls', '90'])

        # Check that the file was created
        self.check_files_in_test_directory(['fort.11_0689'])

    def test_download_inertclds_ls_range(self):
        """Test downloading files from INERTCLDS for a range of Ls values"""
        result = self.run_mars_pull(['INERTCLDS', '-ls', '90', '95'])

        # Check that the files were created
        self.check_files_in_test_directory(['fort.11_0689', 'fort.11_0690'])

    def test_list_option(self):
        """Test the list option to ensure it runs without errors"""
        result = self.run_mars_pull(['-list'])

        # Check that something was printed
        self.assertTrue(len(result.stdout) > 0, "No output generated by -list option")

        # Check for specific expected output
        self.assertIn("Searching for available directories", result.stdout)
        self.assertIn("--------------------------------------", result.stdout)

        # Check for possible outputs - either directories found or error message
        if "No directories were found" in result.stdout:
            # Check error message when no directories found
            self.assertIn("No directories were found", result.stdout)
            self.assertIn("file system is unavailable or unresponsive", result.stdout)
            self.assertIn("Check URL:", result.stdout)
        else:
            # If directories are found, check the expected output format
            self.assertIn("(FV3-based MGCM)", result.stdout)
            self.assertIn("FV3BETAOUT1", result.stdout)
            self.assertIn("You can list the files in a directory", result.stdout)

    def test_list_directory_option(self):
        """Test the list option with a directory to ensure it runs without errors"""
        result = self.run_mars_pull(['-list', 'FV3BETAOUT1'])

        # Check that something was printed
        self.assertTrue(len(result.stdout) > 0, "No output generated by -list FV3BETAOUT1 option")

        # Check for expected output sections
        self.assertIn("Selected: (FV3-based MGCM) FV3BETAOUT1", result.stdout)
        self.assertIn("Searching for available files", result.stdout)

        # Check for possible outputs - either files found or error message
        if "No .nc files found" in result.stdout:
            # Check error message when no files found
            self.assertIn("No .nc files found", result.stdout)
            self.assertIn("file system is unavailable or unresponsive", result.stdout)
        elif "You can download files using the -f option" in result.stdout:
            # If files are found, check the expected usage information
            self.assertIn("You can download files using the -f option", result.stdout)
        
        # Note: We're not checking for actual files as they might not be available
        # if the server is down, which is OK according to requirements
    

    def test_help_message(self):
        """Test that help message can be displayed"""
        result = self.run_mars_pull(['-h'])

        # Check that something was printed
        self.assertTrue(len(result.stdout) > 0, "No help message generated")

        # Check for typical help message components
        help_checks = [
            'usage:',
            '-ls',
            '-f',
            '--list'
        ]

        for check in help_checks:
            self.assertIn(check, result.stdout.lower(), f"Help message missing '{check}'")


if __name__ == '__main__':
    unittest.main()